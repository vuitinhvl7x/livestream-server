// monitor_stream_quality.js
import { StreamsInfo, FramesMonitor, processFrames } from "video-quality-tools";
import path from "path";

// --- CONFIGURATION ---
const FFPROBE_PATH =
  "D:/exe/ffmpeg-master-latest-win64-gpl-shared/bin/ffprobe.exe";
const MEDIA_SERVER_URL = "http://192.168.0.200:8080";
const STREAM_KEY = "cd9d88ef-0d60-4123-803f-38c1d49c4a9d";
const HLS_URL = `${MEDIA_SERVER_URL}/hls/${STREAM_KEY}.m3u8`;
const ANALYSIS_INTERVAL_MS = 5000; // Ph√¢n t√≠ch m·ªói 5 gi√¢y
const FFPROBE_TIMEOUT_MS = 10000; // Th·ªùi gian ch·ªù ffprobe l√† 10 gi√¢y

console.log(`üöÄ B·∫Øt ƒë·∫ßu gi√°m s√°t ch·∫•t l∆∞·ª£ng stream cho: ${HLS_URL}`);

/**
 * L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa stream m·ªôt l·∫ßn khi kh·ªüi ƒë·ªông.
 */
async function fetchStreamInfo() {
  console.log("\n--- 1. L·∫•y th√¥ng tin ban ƒë·∫ßu c·ªßa Stream ---");
  try {
    const streamsInfo = new StreamsInfo(
      { ffprobePath: FFPROBE_PATH, timeoutInMs: FFPROBE_TIMEOUT_MS },
      HLS_URL
    );
    const info = await streamsInfo.fetch();
    console.log("‚úÖ Th√¥ng tin Stream ban ƒë·∫ßu ƒë√£ nh·∫≠n:");
    console.log(JSON.stringify(info, null, 2));
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin stream ban ƒë·∫ßu:", error.message);
    console.warn(
      "   (L·ªói n√†y c√≥ th·ªÉ x·∫£y ra khi stream v·ª´a b·∫Øt ƒë·∫ßu. Tr√¨nh gi√°m s√°t s·∫Ω ti·∫øp t·ª•c.)"
    );
  }
}

/**
 * Gi√°m s√°t ch·∫•t l∆∞·ª£ng stream li√™n t·ª•c theo th·ªùi gian th·ª±c.
 */
function monitorRealtimeQuality() {
  console.log("\n--- 2. B·∫Øt ƒë·∫ßu gi√°m s√°t ch·∫•t l∆∞·ª£ng Real-time ---");
  const framesMonitor = new FramesMonitor(
    {
      ffprobePath: FFPROBE_PATH,
      timeoutInMs: FFPROBE_TIMEOUT_MS,
      bufferMaxLengthInBytes: 1024 * 1024 * 5, // TƒÉng buffer l√™n 5MB
      errorLevel: "error",
      exitProcessGuardTimeoutInMs: 2000,
      analyzeDurationInMs: 9000,
    },
    HLS_URL
  );

  let collectedFrames = [];

  // L·∫Øng nghe t·ª´ng frame
  framesMonitor.on("frame", (frame) => {
    collectedFrames.push(frame);
  });

  // L·∫Øng nghe l·ªói t·ª´ ti·∫øn tr√¨nh monitor
  framesMonitor.on("error", (error) => {
    console.error("‚ùå L·ªói t·ª´ FramesMonitor:", error.message);
  });

  framesMonitor.on("end", () => {
    console.log("‚ÑπÔ∏è Ti·∫øn tr√¨nh FramesMonitor ƒë√£ k·∫øt th√∫c.");
  });

  // Ph√¢n t√≠ch c√°c frame ƒë√£ thu th·∫≠p theo ƒë·ªãnh k·ª≥
  const analysisInterval = setInterval(() => {
    if (collectedFrames.length === 0) {
      console.log(
        `[${new Date().toLocaleTimeString()}] ‚è≥ Kh√¥ng nh·∫≠n ƒë∆∞·ª£c frame n√†o trong ${
          ANALYSIS_INTERVAL_MS / 1000
        } gi√¢y qua. ƒêang ch·ªù stream...`
      );
      return;
    }

    try {
      const stats = processFrames.networkStats(
        collectedFrames,
        ANALYSIS_INTERVAL_MS
      );

      console.log(
        `\n--- üìä Th·ªëng k√™ Real-time (${new Date().toLocaleTimeString()}) ---`
      );

      // Ki·ªÉm tra thu·ªôc t√≠nh tr∆∞·ªõc khi truy c·∫≠p ƒë·ªÉ tr√°nh l·ªói
      if (stats.videoBitrate !== undefined) {
        console.log(`  Bitrate (Video): ${stats.videoBitrate.toFixed(2)} kbps`);
      }
      if (stats.videoFrameRate !== undefined) {
        console.log(
          `  Frame Rate (Video): ${stats.videoFrameRate.toFixed(2)} fps`
        );
      }
      if (stats.audioBitrate !== undefined) {
        console.log(`  Bitrate (Audio): ${stats.audioBitrate.toFixed(2)} kbps`);
      }
      console.log(`  T·ªïng s·ªë Frame trong chu k·ª≥: ${collectedFrames.length}`);

      // Reset l·∫°i m·∫£ng frame cho chu k·ª≥ ti·∫øp theo
      collectedFrames = [];
    } catch (err) {
      console.error(`‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch frame: ${err.message}`);
    }
  }, ANALYSIS_INTERVAL_MS);

  // B·∫Øt ƒë·∫ßu l·∫Øng nghe stream
  framesMonitor.listen();

  // H√†m d·ª´ng m∆∞·ª£t m√†
  const shutdown = async () => {
    console.log("\n gracefully shutting down...");
    clearInterval(analysisInterval);
    try {
      await framesMonitor.stopListen();
      console.log("‚úÖ Tr√¨nh gi√°m s√°t ƒë√£ d·ª´ng th√†nh c√¥ng.");
      process.exit(0);
    } catch (e) {
      console.error("‚ùå L·ªói khi d·ª´ng tr√¨nh gi√°m s√°t:", e.message);
      process.exit(1);
    }
  };

  // B·∫Øt s·ª± ki·ªán Ctrl+C
  process.on("SIGINT", shutdown);
  process.on("SIGTERM", shutdown);
}

// --- Ch·∫°y c√°c h√†m gi√°m s√°t ---
async function main() {
  await fetchStreamInfo();
  monitorRealtimeQuality();
}

main();
